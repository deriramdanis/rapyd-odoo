from orm.models import schemas
import orm.tools as tools

if not tools.exist(tools.menu):
   tools.menu = {}

menu = {}
menu.add = def add(args, **kwargs):
               args = tools.merge(args, tools.copy(kwargs))
               if 'id' in args and 'string' in args:
                  if args.id in tools.menu:
                     return
                  if 'parent' in args:
                     if args.parent not in tools.menu:
                        return
                  if 'model' in args:
                     if args.model not in schemas:
                        return
                  tools.menu[args.id] = tools.merge({'parent': False, 'childs': [], 'model': False, 'view_id': False, 'sequence': 1}, args)

menu.add({'id': 'settings', 'string': 'Settings', 'sequence': 1000})

if not tools.exist(tools.view):
   tools.view = {}

view = {}
view.add = def add(args, **kwargs):
               args = tools.merge(args, tools.copy(kwargs))
               if 'model' in args and 'mode' in args and 'arch' in args:
                  if args.model not in schemas:
                     return
                  if not tools.exist(args.string):
                     args.string = ""
                     for key in tools.menu:
                         if tools.exist(tools.menu[key].model) and tools.menu[key].model == args.model:
                            args.string = tools.menu[key].string
                            break
                  if args.model not in tools.view:
                     tools.view[args.model] = {}
                  if tools.exist(args.init):
                     if not tools.view[args.model].custom_init:
                        tools.view[args.model].custom_init = {}
                     tools.view[args.model].custom_init[args.model + '.' + args.mode] = args.init
                  tools.view[args.model][args.mode] = args.arch
                  tools.view[args.model].string = args.string
                  if not tools.view[args.model].actions:
                     tools.view[args.model].actions = {}
                  if args.action: tools.view[args.model].actions[args.mode] = args.action
                  if not tools.view[args.model].contexts:
                     tools.view[args.model].contexts = {}
                  if args.context: tools.view[args.model].contexts[args.mode] = args.context

tools.configuration.material_theme = 'theme-teal'
tools.configuration.custom_navbar = '#875a7b'
